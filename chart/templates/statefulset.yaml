# Licensed to Apache Software Foundation (ASF) under one or more contributor
# license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright
# ownership. Apache Software Foundation (ASF) licenses this file to you under
# the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ template "banyandb.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "{{ .Values.standalone.name }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "banyandb.fullname" . }}
spec:
  serviceName: banyandb
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "banyandb.name" . }}
      component: "{{ .Values.standalone.name }}"
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "banyandb.name" . }}
        component: "{{ .Values.standalone.name }}"
        release: {{ .Release.Name }}
      {{- if .Values.standalone.podAnnotations }}
      annotations:
{{ toYaml .Values.standalone.podAnnotations | indent 8 }}
      {{- end }}
    spec:
      serviceAccountName: {{ template "banyandb.serviceAccountName" . }}
      {{- with .Values.standalone.securityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      priorityClassName: {{ .Values.standalone.priorityClassName }}
      containers:
        - name: {{ .Values.standalone.name }}
          image: {{ .Values.standalone.image.repository }}:{{ required "banyandb.image.tag is required" .Values.standalone.image.tag }}
          imagePullPolicy: {{ .Values.standalone.image.pullPolicy }}
          env:
            {{- range $env := .Values.standalone.env }}
            - name: {{ $env.name }}
              value: {{ $env.value }}
            {{- end }}
          args:
            {{- range $value := .Values.standalone.config }}
            - {{ $value }}
            {{- end }}
          ports:
            - containerPort: 17912
              name: grpc
            - containerPort: 17913
              name: http
            - containerPort: 6060
              name: pprof
            - containerPort: 2121
              name: observebility
          readinessProbe:
            httpGet:
              path: /api/healthz
              port: 17913
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/healthz
              port: 17913
            initialDelaySeconds: 5
            periodSeconds: 10
          
          {{- if.Values.standalone.resources }}
          resources:
            {{- if.Values.standalone.resources.requests }}
            requests:
              {{- range $request := .Values.standalone.resources.requests }}
              {{ $request.key }}: {{ $request.value }}
              {{- end }}
            {{- end }}
            {{- if.Values.standalone.resources.limits }}
            limits:
              {{- range $limit := .Values.standalone.resources.limits }}
              {{ $limit.key }}: {{ $limit.value }}
              {{- end }}
            {{- end }}
          {{- end }}

          {{- if .Values.storage.enabled }}
          volumeMounts:
            {{- range $claim := .Values.storage.persistentVolumeClaim }}
            {{- if $claim.existingClaimName }}
            {{- range $claim.mountTargets }}
            - mountPath: /tmp/{{ . }}
              name: {{ $claim.existingClaimName }}-volume
              subPath: {{ . }}
            {{- end }}
            {{- else }}
            {{- range $claim.mountTargets }}
            - mountPath: /tmp/{{ . }}
              name: {{ $claim.claimName }}-volume
              subPath: {{ . }}
            {{- end }}
            {{- end }}
            {{- end }}
          {{- end }}

      {{- if .Values.storage.enabled }}
      volumes:
        {{- range $claim := .Values.storage.persistentVolumeClaim }}
        {{- if $claim.existingClaimName }}
        - name: {{ $claim.existingClaimName }}-volume
          persistentVolumeClaim:
            claimName: {{ $claim.existingClaimName }}
        {{ else }}
        - name: {{ $claim.claimName }}-volume
          persistentVolumeClaim:
            claimName: {{ $claim.claimName }}
        {{- end }}
        {{- end }}
      {{- end }}

      {{- if .Values.standalone.tolerations }}
      tolerations:
        {{- range $toleration := .Values.standalone.tolerations }}
        - key: {{ $toleration.key }}
          operator: {{ $toleration.operator }}
          value: {{ $toleration.value }}
          effect: {{ $toleration.effect }}
        {{- end }}
      {{- end }}

      {{- if .Values.standalone.nodeSelector }}
      nodeSelector:
        {{- range $selector := .Values.standalone.nodeSelector }}
        {{ $selector.key }}: {{ $selector.value }}
        {{- end }}
      {{- end }}

      {{- if .Values.standalone.affinity }}
      {{- $affinity := .Values.standalone.affinity }}
      affinity:
        {{- if $affinity.nodeAffinity }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            {{- range $requirement := $affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms }}
              {{- range $matchExpression := $requirement.matchExpressions }}
                - matchExpressions:
                    - key: {{ $matchExpression.key }}
                      operator: {{ $matchExpression.operator }}
                      values:
                        {{- range $v := $matchExpression.values }}
                        - {{ $v }}
                        {{- end }}
              {{- end }}
            {{- end }}
        {{- end }}

        {{- if $affinity.podAffinity }}
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            {{- range $term := $affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution }}
            - topologyKey: {{ $term.topologyKey }}
              namespaces:
                {{- range $ns := $term.namespaces }}
                - {{ $ns }}
                {{- end }}
              labelSelector:
                matchLabels:
                  {{- range $label := $term.labelSelector.matchLabels }}
                  {{ $label.key }}: {{ $label.value }}
                  {{- end }}
            {{- end }}
        {{- end }}
      {{- end }}